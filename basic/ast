Building builtin -> /home/benjbrannick/Documents/Pony/ponyc/packages/builtin
Building ../Pony-experiments/basic -> /home/benjbrannick/Documents/Pony/Pony-experiments/basic
(package:scope
  (module:scope
    (use x "builtin" x)
    (actor:scope
      (id Main)
      x
      tag
      x
      (members
        (new:scope
          tag
          (id create)
          x
          (params
            (param
              (id env)
              (nominal (id $0) (id Env) x val x x)
              x
              [nominal (id $0) (id Env) x val x x]
            )
          )
          (nominal (id $1) (id Main) x tag ^ x)
          x
          (seq
            (=
              (call
                x
                x
                (newref
                  (typeref
                    (typeref (id MyClass) [nominal x (id MyClass) x x x])
                    (typeargs
                      (nominal (id $0) (id U32) x val x x)
                      (nominal (id $0) (id String) x val x x)
                    )
                    [nominal
                      (id $1)
                      (id MyClass)
                      (typeargs
                        (nominal (id $0) (id U32) x val x x)
                        (nominal (id $0) (id String) x val x x)
                      )
                      ref
                      x
                      x
                    ]
                  )
                  (id create)
                  [funtype
                    ref
                    x
                    x
                    (nominal
                      (id $1)
                      (id MyClass)
                      (typeargs
                        (nominal (id $0) (id U32) x val x x)
                        (nominal (id $0) (id String) x val x x)
                      )
                      ref
                      ^
                      x
                    )
                  ]
                )
                [nominal
                  (id $1)
                  (id MyClass)
                  (typeargs
                    (nominal (id $0) (id U32) x val x x)
                    (nominal (id $0) (id String) x val x x)
                  )
                  ref
                  ^
                  x
                ]
              )
              (let
                ((id x)
                  [nominal
                    (id $1)
                    (id MyClass)
                    (typeargs
                      (nominal (id $0) (id U32) x val x x)
                      (nominal (id $0) (id String) x val x x)
                    )
                    ref
                    x
                    x
                  ]
                )
                (nominal
                  (id $1)
                  (id MyClass)
                  (typeargs
                    (nominal (id $0) (id U32) x val x x)
                    (nominal (id $0) (id String) x val x x)
                  )
                  ref
                  x
                  x
                )
                [nominal
                  (id $1)
                  (id MyClass)
                  (typeargs
                    (nominal (id $0) (id U32) x val x x)
                    (nominal (id $0) (id String) x val x x)
                  )
                  ref
                  x
                  x
                ]
              )
              [nominal
                (id $1)
                (id MyClass)
                (typeargs
                  (nominal (id $0) (id U32) x val x x)
                  (nominal (id $0) (id String) x val x x)
                )
                ref
                ^
                x
              ]
            )
            (call
              (positionalargs
                (seq
                  ("Hello world" [nominal (id $0) (id String) x val x x])
                  [nominal (id $0) (id String) x val x x]
                )
              )
              x
              (beref
                (fletref
                  (paramref (id env) [nominal (id $0) (id Env) x val x x])
                  ((id out) [nominal (id $0) (id StdStream) x tag x x])
                  [nominal (id $0) (id StdStream) x tag x x]
                )
                (id print)
                [funtype
                  tag
                  x
                  (params
                    (param
                      (id data)
                      (uniontype
                        (nominal (id $0) (id String) x val x x)
                        (nominal
                          (id $0)
                          (id Array)
                          (typeargs (nominal (id $0) (id U8) x val x x))
                          val
                          x
                          x
                        )
                      )
                      x
                    )
                  )
                  (nominal (id $0) (id None) x val x x)
                ]
              )
              [nominal (id $0) (id None) x val x x]
            )
            [nominal (id $0) (id None) x val x x]
          )
          x
          x
        )
      )
      x
      x
    )
    (class:scope
      (id MyClass)
      (typeparams
        (typeparam (id X) (typeparamref (id X) #any x) x)
        (typeparam (id Y) (typeparamref (id Y) #any x) x)
      )
      ref
      x
      (members
        (new:scope
          ref
          (id create)
          x
          x
          (nominal
            (id $1)
            (id MyClass)
            (typeargs
              (typeparamref (id X) #any x)
              (typeparamref (id Y) #any x)
            )
            ref
            ^
            x
          )
          x
          (seq
            ("" [nominal (id $0) (id String) x val x x])
            [nominal (id $0) (id String) x val x x]
          )
          x
          x
        )
      )
      x
      x
    )
  )
)

Error:
/home/benjbrannick/Documents/Pony/ponyc/packages/builtin/array.pony:111:20: Type Params
  fun ref undefined[B: (A & Real[B] val & Number) = A](len: USize) =>
                   ^
Error:
/home/benjbrannick/Documents/Pony/ponyc/packages/builtin/stdin.pony:116:48: Type Args
        var data = recover Array[U8].>undefined(chunk_size) end
                                               ^
